/*
 * Cloud Native Data Schema Registry
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Archetypical.Software.SchemaRegistry.Attributes;
using Archetypical.Software.SchemaRegistry.Shared.Data;
using Archetypical.Software.SchemaRegistry.Shared.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Swashbuckle.AspNetCore.Annotations;

namespace Archetypical.Software.SchemaRegistry.Controllers
{
    /// <summary>
    ///
    /// </summary>
    [ApiController]
    public class VersionsController : ControllerBase
    {
        private readonly Context _context;
        private readonly IEnumerable<ISchemaValidator> _validators;
        private readonly ILogger<SchemasController> _logger;

        public VersionsController(Context context, IEnumerable<ISchemaValidator> validators, ILogger<SchemasController> logger)
        {
            _context = context;
            _validators = validators;
            _logger = logger;
        }

        /// <summary>
        /// Delete specified version of schema
        /// </summary>
        /// <param name="groupId">schema group</param>
        /// <param name="schemaId">schema id</param>
        /// <param name="versionNumber">version number</param>
        /// <response code="204">OK no content</response>
        [HttpDelete]
        [Route("/schemagroups/{groupId}/schemas/{schemaId}/versions/{versionnumber}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSchemaVersion")]
        public virtual IActionResult DeleteSchemaVersion([FromRoute][Required] string groupId, [FromRoute][Required] string schemaId, [FromRoute][Required] int? versionNumber)
        {
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get specified version of schema
        /// </summary>
        /// <param name="groupId">schema group</param>
        /// <param name="schemaId">schema id</param>
        /// <param name="versionNumber">version number</param>
        /// <response code="200">OK</response>
        /// <response code="404">Specified schema not found</response>
        [HttpGet]
        [Route("/schemagroups/{groupId}/schemas/{schemaId}/versions/{versionnumber}")]
        [ValidateModelState]
        [SwaggerOperation("GetSchemaVersion")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual async Task<IActionResult> GetSchemaVersion([FromRoute][Required] string groupId,
            [FromRoute][Required] string schemaId, [FromRoute][Required] int? versionNumber)
        {
            var schema = await _context.Schemata.Where(x => x.SchemaGroupId == groupId && x.Id == schemaId && x.Version == versionNumber)
                .FirstOrDefaultAsync();

            if (schema == null)
                return NotFound();
            var group = await _context.SchemaGroups.FirstAsync(x => x.Id == groupId);
            Response.Headers.Add("Location",
                Url.Action("GetSchemaVersion", "Versions", new { groupId, schemaId, versionnumber = schema.Version }));
            Response.Headers.Add("Schema-Id", schemaId);
            Response.Headers.Add("Schema-Id-Location",
                Url.Action("GetLatestSchema", "Schemas", new { groupId, schemaId }));
            Response.Headers.Add("Schema-Version", schema.Version.ToString());

            return new ContentResult()
            {
                Content = schema.Contents,
                ContentType = _validators.First(x => x.SchemaFormat == group.Format).ContentType,
                StatusCode = 200
            };
        }

        /// <summary>
        /// Get list of versions
        /// </summary>
        /// <remarks>Get list of versions for specified schema</remarks>
        /// <param name="groupId">schema group</param>
        /// <param name="schemaId">schema id</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/schemagroups/{groupId}/schemas/{schemaId}/versions")]
        [ValidateModelState]
        [SwaggerOperation("GetSchemaVersions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<int?>), description: "OK")]
        public virtual async Task<IActionResult> GetSchemaVersions([FromRoute][Required] string groupId,
            [FromRoute][Required] string schemaId)
        {
            var schema = await _context.Schemata
                .Where(x => x.SchemaGroupId == groupId && x.Id == schemaId)
                .Select(x => x.Version)
                .ToListAsync();

            return Ok(schema);
        }
    }
}