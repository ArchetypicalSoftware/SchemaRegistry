@using Archetypical.Software.SchemaRegistry.Shared.Enums
@model DiffModel;
@{

    ViewData["Title"] = $"{Model.SchemaId} - Diff -v{Model.Version} with -v{Model.PreviousVersion}";

}

@section Styles{

}

<span id="compare"></span>
<div id="container" style="height: 600px; border: 1px solid grey"></div>


@section Scripts{
    <script>
        var require = {
            paths: { vs: '/lib/monaco-editor/min/vs' }
        };
    </script>
    <script src="~/lib/monaco-editor/min/vs/loader.js"></script>
    <script src="~/lib/monaco-editor/min/vs/editor/editor.main.js"></script>
    <script>
        @{
                    var lang = "json";
                    switch (Model.Format)
                    {
                        case Format.JsonSchema:
                        case Format.Avro:
                            lang = "json";
                            break;
                        case Format.XSD:
                            lang = "xml";
                            break;
                        case Format.ProtoV2:
                            break;
                        case Format.ProtoV3:
                            break;
                        case Format.WSDL:
                            break;
                        case Format.OpenApi:
                            break;

                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
         var diff = null;
        var currentModel = null;
        var compareModel = null;

        function GetCurrent() {
            return fetch('@Url.Action("GetSchemaVersion", "Versions", new {groupId = Model.GroupId, schemaId = Model.SchemaId, versionnumber = Model.Version})')
                .then(data => {
                    data.text().then(contents => {
                    currentModel = monaco.editor.createModel(
                        contents,
                        '@lang'
                        );
                        console.log(currentModel);
                    });
                });
        }

        function GetPrevious() {
            return fetch('@Url.Action("GetSchemaVersion", "Versions", new {groupId = Model.GroupId, schemaId = Model.SchemaId, versionnumber = Model.PreviousVersion})')
                .then(data => {
                    data.text().then(contents => {
                        compareModel = monaco.editor.createModel(
                            contents,
                            '@lang'
                        );
                        console.log(compareModel);
                    });
                });
        }

        function BuildDiff() {

            console.log('fetching...')
            console.log(monaco);
            return Promise.all([GetCurrent(), GetPrevious()]).then(() => {

                console.log('rendering')

                setTimeout(() => {
                        diff = monaco.editor.createDiffEditor(
                            document.getElementById('container'),
                            {
                                ignoreTrimWhitespace:true
                            });
                        diff.setModel({
                            original: compareModel,
                            modified: currentModel
                        });
                    },
                    1000);
            });
        }

         setTimeout(BuildDiff, 400);
    </script>
}