/*
 * Cloud Native Data Schema Registry
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Archetypical.Software.SchemaRegistry.Shared.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class SchemaGroup : IEquatable<SchemaGroup>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Createdtimeutc
        /// </summary>
        [DataMember(Name = "createdtimeutc")]
        public DateTime? Createdtimeutc { get; set; }

        /// <summary>
        /// Gets or Sets Updatedtimeutc
        /// </summary>
        [DataMember(Name = "updatedtimeutc")]
        public DateTime? Updatedtimeutc { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format")]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets GroupProperties
        /// </summary>
        [DataMember(Name = "groupProperties")]
        public Dictionary<string, string> GroupProperties { get; set; }

        [JsonIgnore]
        public string GroupPropertiesString
        {
            get => JsonSerializer.Serialize(GroupProperties ?? new Dictionary<string, string>());
            set => GroupProperties = JsonSerializer.Deserialize<Dictionary<string, string>>(value);
        }

        [JsonIgnore]
        public List<Schema> Schemas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemaGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Createdtimeutc: ").Append(Createdtimeutc).Append("\n");
            sb.Append("  Updatedtimeutc: ").Append(Updatedtimeutc).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  GroupProperties: ").Append(GroupProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((SchemaGroup)obj);
        }

        /// <summary>
        /// Returns true if SchemaGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of SchemaGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemaGroup other)
        {
            if (ReferenceEquals(null, other))
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    Createdtimeutc == other.Createdtimeutc ||
                    Createdtimeutc != null &&
                    Createdtimeutc.Equals(other.Createdtimeutc)
                ) &&
                (
                    Updatedtimeutc == other.Updatedtimeutc ||
                    Updatedtimeutc != null &&
                    Updatedtimeutc.Equals(other.Updatedtimeutc)
                ) &&
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                ) &&
                (
                    GroupProperties == other.GroupProperties ||
                    GroupProperties != null &&
                    GroupProperties.SequenceEqual(other.GroupProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                if (Createdtimeutc != null)
                    hashCode = hashCode * 59 + Createdtimeutc.GetHashCode();
                if (Updatedtimeutc != null)
                    hashCode = hashCode * 59 + Updatedtimeutc.GetHashCode();
                if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                if (GroupProperties != null)
                    hashCode = hashCode * 59 + GroupProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(SchemaGroup left, SchemaGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SchemaGroup left, SchemaGroup right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}